const  fese  = require("fs");
const { isFunction } = require("util");
const okuoglum = (file) => JSON.parse(fese.readFileSync(file, "utf-8"));
const yazkızım = (file, data) =>
  fese.writeFileSync(file, JSON.stringify(data, null, 4));
var verihata = "Lütfen bir veri belirt  -  Please specify a data";

class Database {
  constructor(d) {
    this.path = d || "./database.json";
  }
  
  set(veri, deger) {
    if (!veri) throw new TypeError(verihata);
    if (!deger) {
    if (deger && veri) {
      let dbd = okuoglum(this.path);
      dbd[veri] = deger;
      yazkızım(this.path, dbd);
    }
  }
}

  has(veri) {
    if (!veri) throw new TypeError(verihata);
    let dbd = okuoglum(this.path);
    if (!dbd[veri]) return false;
    if (dbd[veri]) return true;
  }
  add(veri, deger) {
    if (!veri) throw new TypeError(verihata);
    if (!deger)
      throw new TypeError(
        `${veri} adlı veriye kaç sayı ekliyeceğim onu yazmalısın  - ${veri} how many numbers will i add, you have to do it`
      );
    let dbd = okuoglum(this.path);
    dbd[veri] += deger;
    yazkızım(this.path, dbd);
  }
  fetch(veri) {
    if (!veri) throw new TypeError(verihata);
    let dbd = okuoglum(this.path);
    return dbd[veri];
  }
  get(veri) {
    if (!veri) throw new TypeError(verihata);
    let dbd = okuoglum(this.path);
    return dbd[veri];
  }
  push(veri, deger) {
    if (!veri) throw new TypeError(verihata);
    let dbd = okuoglum(this.path);
    if (Array.isArray(dbd[veri] === false))
      throw new TypeError("Bu veri arrayl değil  -  This data not array");
    dbd[veri].push(deger);
    yazkızım(this.path, dbd);
  }
  delete(veri) {
    if (!veri) throw new TypeError(verihata);
    let dbd = okuoglum(this.path);
    if (!dbd[veri])
      throw new TypeError("Böyle bir veri yok  -  No such data found !");
    delete dbd[veri];
    yazkızım(this.path, dbd);
  }
  deleteAll() {
    yazkızım(this.path, {})
  }
  subtract(veri, deger) {
    if (!veri) throw new TypeError(verihata);
    if (!deger)
      throw new TypeError(
        `${veri} adlı veriden kaç çıkaracağım  - How many will I subtract from the data named ${veri}`
      );
    let dbd = okuoglum(this.path);
    dbd[veri] = dbd[veri] - Number(deger);
    yazkızım(this.path, dbd);
  }
  fetchAll() {
    return okuoglum(this.path);
  }
  type(veri) {
    if (!veri) throw new TypeError(verihata);
    if (!data[veri]) return null;
    let dbd = okuoglum(this.path);

    if (Array.isArray(this.get(veri))) return "array";
    if (typeof this.get(veri === "number")) return "number";
    if (typeof this.get(veri === "string")) return "string";
  }
  edit(veri, deger) {
    if (!veri) throw new TypeError(verihata);
    let dbd = okuoglum(this.path);
    dbd[veri] = deger;
    yazkızım(this.path, dbd);
  }
  getAll() {
    return okuoglum(this.path);
  }
  test() {
    var tes = "merhaba"
    this.set(tes , "sa")
    this.set("push", [])
    this.set("testmath",1)
    this.set("testmath2",2)
    console.log("Data Write Test passed , No errors")
    this.add("testmath",2)
    console.log("Data add Test passed , No errors")
    this.edit(tes , "as")
    console.log("Data edit test passed , No errors")
    this.fetch(tes)
    this.fetch("testmath")
    this.fetchAll()
    console.log("Data fetch test passed , No errors")
    this.get(tes)
    this.getAll()
    console.log("Data get test passed , No errors")
    this.has(tes)
    this.has("asdfgadsfgdagf")
    console.log("Data has test passed , No errors")
    this.push("push","sa")
    console.log("Data push test passed , No errors")
    this.subtract("testmath2",1)
    console.log("Data subtract test passed , No errors")
    this.delete("testmath")
    this.deleteAll()
    console.log("Data delete test passed , No errors")
    console.log("All test passed no errors !")
  }
}
module.exports = Database;
